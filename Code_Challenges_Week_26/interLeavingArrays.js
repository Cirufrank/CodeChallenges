/*

Instructions:

Create a function, that accepts an arbitrary number of arrays and returns a single array generated by alternately appending elements from the passed in arguments. If one of them is shorter than the others, the result should be padded with empty elements.

Examples:

interleave([1, 2, 3], ["c", "d", "e"]) === [1, "c", 2, "d", 3, "e"]
interleave([1, 2, 3], [4, 5]) === [1, 4, 2, 5, 3, null]
interleave([1, 2, 3], [4, 5, 6], [7, 8, 9]) === [1, 4, 7, 2, 5, 8, 3, 6, 9]
interleave([]) === []

*/

function interleave() {
    const arrayOfArrays = Array.from(arguments);
    if (arrayOfArrays.every(array => array.length === 0)) return arrayOfArrays[0];
    const resultArray = [];
    const lengthOfMaxArray = (arrayOfArrays.every(array => array.length === arrayOfArrays[0].length)) ? arrayOfArrays[0].length : arrayOfArrays.reduce((maxLengthArray, curArray) => (maxLengthArray.length >= curArray.length) ? maxLengthArray : curArray, arrayOfArrays[0]).length;
    for (let position = 0; position < lengthOfMaxArray; position += 1) {
      arrayOfArrays.forEach(array => resultArray.push((array[position] === 0) ? array[position] : array[position] || null));
    }
    return resultArray;
  }

/*

Tests:

describe("Sample tests", function() {
  it("Tests", function() {
    assert.deepEqual(interleave([1, 2, 3], ["c", "d", "e"]), [1, "c", 2, "d", 3, "e"]);
    assert.deepEqual(interleave([1, 2, 3], [4, 5]), [1, 4, 2, 5, 3, null]);
    assert.deepEqual(interleave([1, 2, 3], [4, 5, 6], [7, 8, 9]), [1, 4, 7, 2, 5, 8, 3, 6, 9]);
    assert.deepEqual(interleave([]), []);
  });
});

*/